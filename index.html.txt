ÏßÑÎã®ÎèÑÍµ¨ ÏΩîÎìú 20250708

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ACTIG ÌçºÏä§ÎÑê Î∏åÎûúÎî© ÏßÑÎã®</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            margin-bottom: 20px;
        }

        .home-screen {
            text-align: center;
        }

        .home-screen h1 {
            font-size: 2.5em;
            margin-bottom: 20px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .home-screen p {
            font-size: 1.2em;
            color: #666;
            margin-bottom: 30px;
            line-height: 1.6;
        }

        .start-btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 1.2em;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .start-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 7px 20px rgba(0, 0, 0, 0.3);
        }

        .progress-container {
            margin-bottom: 30px;
        }

        .progress-ring {
            width: 120px;
            height: 120px;
            margin: 0 auto 20px;
            position: relative;
        }

        .progress-ring svg {
            width: 100%;
            height: 100%;
            transform: rotate(-90deg);
        }

        .progress-ring circle {
            fill: none;
            stroke-width: 8;
            cx: 60;
            cy: 60;
            r: 52;
        }

        .progress-ring .bg {
            stroke: #e6e6e6;
        }

        .progress-ring .progress {
            stroke: currentColor;
            stroke-linecap: round;
            stroke-dasharray: 327;
            stroke-dashoffset: 327;
            transition: stroke-dashoffset 0.5s ease;
        }

        .progress-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 1.2em;
            font-weight: bold;
        }

        .question-card {
            transition: all 0.5s ease;
            transform-style: preserve-3d;
        }

        .question-number {
            font-size: 0.9em;
            color: #666;
            margin-bottom: 10px;
        }

        .question-text {
            font-size: 1.3em;
            margin-bottom: 30px;
            line-height: 1.5;
            font-weight: 500;
        }

        .options {
            display: flex;
            justify-content: space-between;
            gap: 10px;
            flex-wrap: wrap;
        }

        .option {
            flex: 1;
            min-width: 60px;
            padding: 15px 10px;
            border: 2px solid #e0e0e0;
            border-radius: 15px;
            background: white;
            cursor: pointer;
            text-align: center;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .option:hover {
            border-color: currentColor;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .option.selected {
            border-color: currentColor;
            background: currentColor;
            color: white;
            transform: scale(1.05);
        }

        .option-value {
            font-size: 1.2em;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .option-label {
            font-size: 0.8em;
            opacity: 0.8;
        }

        /* ÏòÅÏó≠Î≥Ñ ÏÉâÏÉÅ */
        .area-A { color: #FF9800; background: linear-gradient(135deg, #FFF3E0, #FFE0B2); }
        .area-C { color: #2196F3; background: linear-gradient(135deg, #E3F2FD, #BBDEFB); }
        .area-T { color: #4CAF50; background: linear-gradient(135deg, #E8F5E9, #C8E6C9); }
        .area-I { color: #FF7043; background: linear-gradient(135deg, #FBE9E7, #FFCCBC); }
        .area-G { color: #9C27B0; background: linear-gradient(135deg, #F3E5F5, #E1BEE7); }

        .results-screen {
            text-align: center;
        }

        .results-screen h2 {
            font-size: 2em;
            margin-bottom: 30px;
            color: #333;
        }

        .chart-container {
            position: relative;
            height: 400px;
            margin: 30px 0;
        }

        .type-result {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
        }

        .type-result h3 {
            font-size: 1.5em;
            margin-bottom: 10px;
        }

        .recommendations {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 30px 0;
        }

        .recommendation-card {
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .recommendation-card h4 {
            color: #667eea;
            margin-bottom: 15px;
        }

        .recommendation-card ul {
            list-style: none;
            padding: 0;
        }

        .recommendation-card li {
            padding: 8px 0;
            border-bottom: 1px solid #f0f0f0;
        }

        .recommendation-card li:last-child {
            border-bottom: none;
        }

        .strengths-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .strength-card {
            background: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
            border-left: 4px solid #667eea;
        }

        .action-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 30px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1em;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }

        .btn-secondary {
            background: white;
            color: #667eea;
            border: 2px solid #667eea;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .hidden {
            display: none;
        }

        .confetti {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1000;
        }

        @media (max-width: 768px) {
            .options {
                flex-direction: column;
            }
            
            .option {
                min-width: auto;
            }
            
            .recommendations {
                grid-template-columns: 1fr;
            }
            
            .container {
                padding: 10px;
            }
            
            .card {
                padding: 20px;
            }
        }

        .pulse {
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Ìôà ÌôîÎ©¥ -->
        <div id="home-screen" class="card home-screen fade-in">
            <h1>üåü ACTIG ÌçºÏä§ÎÑê Î∏åÎûúÎî© ÏßÑÎã®</h1>
            <p>
                ÎÇòÏùò Í∞ïÏ†êÍ≥º ÏÑ±ÌíàÏùÑ Î∞úÍ≤¨ÌïòÍ≥†<br>
                ÎßûÏ∂§Ìòï ÏßÑÎ°úÏôÄ Ï∞ΩÏóÖ Î∂ÑÏïºÎ•º Ï∂îÏ≤úÎ∞õÏïÑÎ≥¥ÏÑ∏Ïöî!<br>
                <strong>Ï¥ù 80Í∞ú ÏßàÎ¨∏, ÏïΩ 15Î∂Ñ ÏÜåÏöî</strong>
            </p>
            <div style="margin: 20px 0; display: flex; justify-content: center; gap: 20px; flex-wrap: wrap;">
                <div style="text-align: center;">
                    <div style="font-size: 2em;">üéØ</div>
                    <div>Ïã§Ï≤ú</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 2em;">ü§ù</div>
                    <div>ÏÜåÌÜµ</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 2em;">üß†</div>
                    <div>ÏÇ¨Í≥†</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 2em;">üí™</div>
                    <div>ÏòÅÌñ•</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 2em;">üå±</div>
                    <div>ÏÑ±Ïû•</div>
                </div>
            </div>
            <button class="start-btn pulse" onclick="startDiagnosis()">ÏßÑÎã® ÏãúÏûëÌïòÍ∏∞</button>
        </div>

        <!-- ÏßàÎ¨∏ ÌôîÎ©¥ -->
        <div id="question-screen" class="card question-card hidden">
            <div class="progress-container">
                <div class="progress-ring">
                    <svg>
                        <circle class="bg"></circle>
                        <circle class="progress"></circle>
                    </svg>
                    <div class="progress-text">
                        <span id="progress-percent">0%</span>
                    </div>
                </div>
                <div class="question-number" id="question-number">ÏßàÎ¨∏ 1 / 80</div>
            </div>
            
            <div class="question-text" id="question-text"></div>
            
            <div class="options" id="options">
                <div class="option" data-value="1">
                    <div class="option-value">1</div>
                    <div class="option-label">Ï†ÑÌòÄ<br>ÏïÑÎãàÎã§</div>
                </div>
                <div class="option" data-value="2">
                    <div class="option-value">2</div>
                    <div class="option-label">ÏïÑÎãàÎã§</div>
                </div>
                <div class="option" data-value="3">
                    <div class="option-value">3</div>
                    <div class="option-label">Î≥¥ÌÜµ</div>
                </div>
                <div class="option" data-value="4">
                    <div class="option-value">4</div>
                    <div class="option-label">Í∑∏Î†áÎã§</div>
                </div>
                <div class="option" data-value="5">
                    <div class="option-value">5</div>
                    <div class="option-label">Îß§Ïö∞<br>Í∑∏Î†áÎã§</div>
                </div>
            </div>
        </div>

        <!-- Í≤∞Í≥º ÌôîÎ©¥ -->
        <div id="results-screen" class="card results-screen hidden">
            <h2>üéâ ÏßÑÎã® Í≤∞Í≥º</h2>
            
            <div class="type-result">
                <h3 id="user-type"></h3>
                <p id="type-description"></p>
            </div>
            
            <div class="chart-container">
                <canvas id="radarChart"></canvas>
            </div>
            
            <div class="recommendations">
                <div class="recommendation-card">
                    <h4>üíº Ï∂îÏ≤ú ÏßÅÏóÖ (3Ï¢Ö)</h4>
                    <ul id="job-recommendations"></ul>
                </div>
                <div class="recommendation-card">
                    <h4>üöÄ Ï∂îÏ≤ú Ï∞ΩÏóÖ Î∂ÑÏïº (2Ï¢Ö)</h4>
                    <ul id="startup-recommendations"></ul>
                </div>
            </div>
            
            <div class="recommendation-card" style="margin-top: 20px;">
                <h4>üí™ Í∞ïÏ†ê Í∞ïÌôî Î∞©Î≤ï</h4>
                <div class="strengths-grid" id="strengths-grid"></div>
            </div>
            
            <div class="action-buttons">
                <button class="btn btn-primary" onclick="saveResults()">Í≤∞Í≥º Ï†ÄÏû•</button>
                <button class="btn btn-secondary" onclick="shareResults()">Í≤∞Í≥º Í≥µÏú†</button>
                <button class="btn btn-secondary" onclick="downloadPDF()">PDF Îã§Ïö¥Î°úÎìú</button>
                <button class="btn btn-secondary" onclick="restartDiagnosis()">Îã§Ïãú ÏßÑÎã®</button>
            </div>
        </div>
    </div>

    <script>
        // ÏßÑÎã® Îç∞Ïù¥ÌÑ∞
        const questions = [
            // AÏòÅÏó≠ (Action/Ïã§Ï≤ú) - 16Î¨∏Ìï≠
            { area: 'A', text: 'Î™©ÌëúÎ•º Ï†ïÌïòÎ©¥ Íº≠ Ïù¥Î£®Í≥† Ïã∂Ïñ¥ÏßÄÎÇòÏöî?' },
            { area: 'A', text: 'Í≥ÑÌöçÏùÑ ÏÑ∏Ïö∞Í≥† Í∑∏ÎåÄÎ°ú Ïã§ÌñâÌïòÎäî Ìé∏Ïù∏Í∞ÄÏöî?' },
            { area: 'A', text: 'Ìïú Í∞ÄÏßÄ ÏùºÏóê Îπ†ÏßÄÎ©¥ Ï£ºÎ≥ÄÏù¥ Ïïà Î≥¥Ïù¥ÎÇòÏöî?' },
            { area: 'A', text: 'ÏùºÏùÑ Ï≤¥Í≥ÑÏ†ÅÏúºÎ°ú Ï†ïÎ¶¨ÌïòÎäî Í≤ÉÏùÑ Ï¢ãÏïÑÌïòÎÇòÏöî?' },
            { area: 'A', text: 'Îß°ÏùÄ ÏùºÏùÄ ÎÅùÍπåÏßÄ Ìï¥ÎÇ¥Ïïº ÌïúÎã§Í≥† ÏÉùÍ∞ÅÌïòÎÇòÏöî?' },
            { area: 'A', text: 'Î¨∏Ï†úÍ∞Ä ÏÉùÍ∏∞Î©¥ Îπ®Î¶¨ Ìï¥Í≤∞ÌïòÎ†§Í≥† ÎÖ∏Î†•ÌïòÎÇòÏöî?' },
            { area: 'A', text: 'Ìïú Î≤à Ï†ïÌïú ÏõêÏπôÏùÄ ÏßÄÌÇ§Î†§Í≥† ÌïòÎÇòÏöî?' },
            { area: 'A', text: 'Îã§Î•∏ ÏÇ¨ÎûåÎ≥¥Îã§ Îçî Ïó¥Ïã¨Ìûà ÌïòÎ†§Í≥† ÌïòÎÇòÏöî?' },
            { area: 'A', text: 'Ïñ¥Î†§Ïö¥ ÏùºÏù¥ ÏûàÏñ¥ÎèÑ Ìè¨Í∏∞ÌïòÏßÄ ÏïäÎäî Ìé∏Ïù∏Í∞ÄÏöî?' },
            { area: 'A', text: 'Í≤∞Ï†ïÌï† ÏùºÏù¥ ÏûàÏúºÎ©¥ Îπ®Î¶¨ Ï†ïÌïòÎäî Ìé∏Ïù∏Í∞ÄÏöî?' },
            { area: 'A', text: 'ÌûòÎì† ÏùºÎèÑ Ï∞∏Í≥† Í≤¨Îîú Ïàò ÏûàÎÇòÏöî?' },
            { area: 'A', text: 'Î®ºÏ†Ä ÎÇòÏÑúÏÑú ÏùºÏùÑ ÏãúÏûëÌïòÎäî Ìé∏Ïù∏Í∞ÄÏöî?' },
            { area: 'A', text: 'ÏπúÍµ¨Îì§Ïù¥ ÎÇòÎ•º ÎØøÏùÑ ÎßåÌïòÎã§Í≥† ÏÉùÍ∞ÅÌïòÎÇòÏöî?' },
            { area: 'A', text: 'Îã§Î•∏ ÏÇ¨ÎûåÏùÑ ÎèÑÏôÄÏ£ºÎäî Í≤ÉÏù¥ Í∏∞Î∂Ñ Ï¢ãÎÇòÏöî?' },
            { area: 'A', text: 'ÏïΩÏÜç ÏãúÍ∞ÑÏùÑ Íº≠ ÏßÄÌÇ§Î†§Í≥† ÌïòÎÇòÏöî?' },
            { area: 'A', text: 'ÏùºÏùÑ Ìï† Îïå ÍººÍººÌïòÍ≤å ÎßàÎ¨¥Î¶¨ÌïòÎäî Ìé∏Ïù∏Í∞ÄÏöî?' },

            // CÏòÅÏó≠ (Connection/ÏÜåÌÜµ) - 16Î¨∏Ìï≠
            { area: 'C', text: 'ÎÇ¥ ÏÉùÍ∞ÅÏùÑ Îã§Î•∏ ÏÇ¨ÎûåÏóêÍ≤å Ïûò Ï†ÑÎã¨Ìï† Ïàò ÏûàÎÇòÏöî?' },
            { area: 'C', text: 'ÏπúÍµ¨Í∞Ä ÏÜçÏÉÅÌï¥ÌïòÎ©¥ ÎÇòÎèÑ ÎßàÏùåÏù¥ ÏïÑÌîàÍ∞ÄÏöî?' },
            { area: 'C', text: 'ÏπúÍµ¨ÏôÄ ÍπäÏùÄ Ïù¥ÏïºÍ∏∞Î•º ÎÇòÎàÑÎäî Í≤ÉÏùÑ Ï¢ãÏïÑÌïòÎÇòÏöî?' },
            { area: 'C', text: 'Ï≤òÏùå ÎßåÎÇú ÏÇ¨ÎûåÍ≥ºÎèÑ ÏâΩÍ≤å ÏπúÌï¥ÏßÄÎÇòÏöî?' },
            { area: 'C', text: 'ÎÇòÏôÄ Îã§Î•∏ ÏùòÍ≤¨ÎèÑ Ïù¥Ìï¥ÌïòÎ†§Í≥† ÎÖ∏Î†•ÌïòÎÇòÏöî?' },
            { area: 'C', text: 'ÏπúÍµ¨Îì§Ïù¥ Ïã∏Ïö∞Î©¥ Ï§ëÍ∞ÑÏóêÏÑú ÌôîÌï¥ÏãúÌÇ§Î†§Í≥† ÌïòÎÇòÏöî?' },
            { area: 'C', text: 'Îã§Î•∏ ÏÇ¨ÎûåÏù¥ ÏûòÌïòÎ©¥ ÏßÑÏã¨ÏúºÎ°ú Í∏∞ÎªêÌïòÎÇòÏöî?' },
            { area: 'C', text: 'Ïñ¥Î†§Ïö¥ ÏÇ¨ÎûåÏùÑ Î≥¥Î©¥ ÎèÑÏôÄÏ£ºÍ≥† Ïã∂Ïñ¥ÏßÄÎÇòÏöî?' },
            { area: 'C', text: 'ÎÇ¥ Î¨ºÍ±¥ÏùÑ ÏπúÍµ¨Îì§Í≥º ÎÇòÎàÑÎäî Í≤ÉÏù¥ ÏûêÏó∞Ïä§Îü¨Ïö¥Í∞ÄÏöî?' },
            { area: 'C', text: 'ÏÜêÎãòÏù¥ Ïò§Î©¥ Î∞òÍ∞ëÍ≤å ÎßûÏù¥ÌïòÎäî Ìé∏Ïù∏Í∞ÄÏöî?' },
            { area: 'C', text: 'Îã§Î•∏ ÏÇ¨ÎûåÏùò Í∏∞Î∂Ñ Î≥ÄÌôîÎ•º Ïûò ÏïåÏïÑÏ∞®Î¶¨ÎÇòÏöî?' },
            { area: 'C', text: 'ÌôîÍ∞Ä ÎÇòÎèÑ Î∂ÄÎìúÎüΩÍ≤å ÎßêÌïòÎ†§Í≥† ÎÖ∏Î†•ÌïòÎÇòÏöî?' },
            { area: 'C', text: 'ÎÇòÏóêÍ≤å ÏÉÅÏ≤òÎ•º Ï§Ä ÏÇ¨ÎûåÎèÑ Ïö©ÏÑúÌï† Ïàò ÏûàÎÇòÏöî?' },
            { area: 'C', text: 'Í∞ÄÏ°±Í≥º ÏπúÍµ¨Îì§ÏóêÍ≤å Ïï†Ï†ïÏùÑ ÏûêÏ£º ÌëúÌòÑÌïòÎÇòÏöî?' },
            { area: 'C', text: 'ÏπúÍµ¨ÏôÄÏùò ÏïΩÏÜçÏùÄ Íº≠ ÏßÄÌÇ§Î†§Í≥† ÌïòÎÇòÏöî?' },
            { area: 'C', text: 'Í±∞ÏßìÎßêÎ≥¥Îã§Îäî ÏÜîÏßÅÌïòÍ≤å ÎßêÌïòÎäî Ìé∏Ïù∏Í∞ÄÏöî?' },

            // TÏòÅÏó≠ (Thinking/ÏÇ¨Í≥†) - 16Î¨∏Ìï≠
            { area: 'T', text: 'Î¨∏Ï†úÎ•º Ìï¥Í≤∞Ìï† Îïå Ïó¨Îü¨ Î∞©Î≤ïÏùÑ ÏÉùÍ∞ÅÌï¥Î≥¥ÎÇòÏöî?' },
            { area: 'T', text: 'Î≥µÏû°Ìïú Î¨∏Ï†úÎ•º Îã®Í≥ÑÎ≥ÑÎ°ú ÎÇòÎàÑÏñ¥ ÏÉùÍ∞ÅÌïòÎÇòÏöî?' },
            { area: 'T', text: 'ÏÉàÎ°úÏö¥ ÏïÑÏù¥ÎîîÏñ¥Í∞Ä ÏûêÏ£º Îñ†Ïò§Î•¥ÎÇòÏöî?' },
            { area: 'T', text: 'ÏïûÏúºÎ°ú ÏùºÏñ¥ÎÇ† ÏùºÏùÑ ÎØ∏Î¶¨ ÏÉùÍ∞ÅÌï¥Î≥¥Îäî Ìé∏Ïù∏Í∞ÄÏöî?' },
            { area: 'T', text: 'ÏÉàÎ°úÏö¥ Í≤ÉÏùÑ Î∞∞Ïö∞Îäî Í≤ÉÏù¥ Ïû¨ÎØ∏ÏûàÎÇòÏöî?' },
            { area: 'T', text: 'ÌòºÏûê ÏûàÏùÑ Îïå ÍπäÍ≤å ÏÉùÍ∞ÅÌïòÎäî Í≤ÉÏùÑ Ï¢ãÏïÑÌïòÎÇòÏöî?' },
            { area: 'T', text: 'ÏÑ§Î™ÖÌïòÍ∏∞ Ïñ¥Î†µÏßÄÎßå Î≠îÍ∞Ä ÎäêÎÇåÏù¥ Ïò§Îäî Ìé∏Ïù∏Í∞ÄÏöî?' },
            { area: 'T', text: 'ÏπúÍµ¨Îì§Ïù¥ Ï°∞Ïñ∏ÏùÑ Íµ¨ÌïòÎü¨ ÏûêÏ£º Ï∞æÏïÑÏò§ÎÇòÏöî?' },
            { area: 'T', text: 'Ïò≥Í≥† Í∑∏Î¶ÑÏùÑ Ïûò Íµ¨Î∂ÑÌï† Ïàò ÏûàÎÇòÏöî?' },
            { area: 'T', text: 'ÎÇ®Îì§Í≥º Îã§Î•∏ Î∞©Î≤ïÏúºÎ°ú Î¨∏Ï†úÎ•º Ìï¥Í≤∞ÌïòÎ†§Í≥† ÌïòÎÇòÏöî?' },
            { area: 'T', text: 'Ï§ëÏöîÌïú Í≤∞Ï†ïÏùÑ Ìï† Îïå Ï∂©Î∂ÑÌûà ÏÉùÍ∞ÅÌïòÍ≥† Ï†ïÌïòÎÇòÏöî?' },
            { area: 'T', text: 'ÏúÑÌóòÌïú ÏÉÅÌô©ÏùÑ ÎØ∏Î¶¨ ÏïåÏïÑÏ∞®Î¶¨Îäî Ìé∏Ïù∏Í∞ÄÏöî?' },
            { area: 'T', text: 'ÏûëÏùÄ Î≥ÄÌôîÎÇò Ï∞®Ïù¥Ï†êÎèÑ Ïûò Î∞úÍ≤¨ÌïòÎÇòÏöî?' },
            { area: 'T', text: 'Í∞ëÏûëÏä§Îü¨Ïö¥ ÏÉÅÌô©ÏóêÎèÑ Îπ†Î•¥Í≤å ÎåÄÏ≤òÌï† Ïàò ÏûàÎÇòÏöî?' },
            { area: 'T', text: 'Ïñ¥Î†§Ïö¥ Î¨∏Ï†úÎèÑ ÎÅùÍπåÏßÄ ÌíÄÎ†§Í≥† ÎÖ∏Î†•ÌïòÎÇòÏöî?' },
            { area: 'T', text: 'Í≥ÑÌöçÏù¥ Î∞îÎÄåÏñ¥ÎèÑ Îπ†Î•¥Í≤å Ï†ÅÏùëÌï† Ïàò ÏûàÎÇòÏöî?' },

            // IÏòÅÏó≠ (Influence/ÏòÅÌñ•) - 16Î¨∏Ìï≠
            { area: 'I', text: 'ÌåÄ ÌôúÎèôÏóêÏÑú Î¶¨Îçî Ïó≠Ìï†ÏùÑ Îß°Í≤å ÎêòÎÇòÏöî?' },
            { area: 'I', text: 'ÏïÑÏù¥ÎîîÏñ¥Í∞Ä ÏûàÏúºÎ©¥ Î∞îÎ°ú Ïã§ÌñâÌï¥Î≥¥Î†§Í≥† ÌïòÎÇòÏöî?' },
            { area: 'I', text: 'ÎÇ¥ Îä•Î†•ÏùÑ ÎØøÍ≥† ÎèÑÏ†ÑÌïòÎäî Ìé∏Ïù∏Í∞ÄÏöî?' },
            { area: 'I', text: 'ÎßéÏùÄ ÏÇ¨ÎûåÎì§ÏóêÍ≤å Ïù∏Ï†ïÎ∞õÍ≥† Ïã∂ÎÇòÏöî?' },
            { area: 'I', text: 'Îã§Î•∏ ÏÇ¨ÎûåÍ≥º Í≤ΩÏüÅÌïòÎ©¥ Îçî Ïó¥Ïã¨Ìûà ÌïòÍ≤å ÎêòÎÇòÏöî?' },
            { area: 'I', text: 'Î¨¥ÏóáÏùÑ ÌïòÎì† ÏµúÍ≥†Í∞Ä ÎêòÍ≥† Ïã∂ÎÇòÏöî?' },
            { area: 'I', text: 'ÌûòÎì† ÏÉÅÌô©ÏóêÏÑúÎèÑ Ï¢ãÏùÄ Î©¥ÏùÑ Ï∞æÏúºÎ†§Í≥† ÌïòÎÇòÏöî?' },
            { area: 'I', text: 'Ïò≥Îã§Í≥† ÏÉùÍ∞ÅÌïòÎäî Í≤ÉÏùÑ ÎãπÎãπÌïòÍ≤å ÎßêÌï† Ïàò ÏûàÎÇòÏöî?' },
            { area: 'I', text: 'Îã§Î•∏ ÏÇ¨ÎûåÏùÑ ÎÇ¥ ÏùòÍ≤¨Ïóê ÎèôÏùòÏãúÌÇ§Îäî Í≤ÉÏù¥ ÏûêÏó∞Ïä§Îü¨Ïö¥Í∞ÄÏöî?' },
            { area: 'I', text: 'Î∂àÍ≥µÏ†ïÌïú ÏùºÏùÑ Î≥¥Î©¥ Ï∞∏ÏùÑ Ïàò ÏóÜÎÇòÏöî?' },
            { area: 'I', text: 'Ï¢ãÏïÑÌïòÎäî ÏùºÏóêÎäî ÏôÑÏ†ÑÌûà Îπ†Ï†∏ÏÑú ÌïòÎÇòÏöî?' },
            { area: 'I', text: 'Î≥¥Ïù¥ÏßÄ ÏïäÎäî Í≤ÉÎèÑ ÎØøÍ≥† ÌñâÎèôÌï† Ïàò ÏûàÎÇòÏöî?' },
            { area: 'I', text: 'Í∞êÏ†ïÏù¥ Í≤©Ìï¥Ï†∏ÎèÑ Ïä§Ïä§Î°ú Ï°∞Ï†àÌï† Ïàò ÏûàÎÇòÏöî?' },
            { area: 'I', text: 'Í±∞ÏßìÎ≥¥Îã§Îäî ÏßÑÏã§ÏùÑ ÎßêÌïòÎäî Í≤ÉÏù¥ Ï§ëÏöîÌïòÎã§Í≥† ÏÉùÍ∞ÅÌïòÎÇòÏöî?' },
            { area: 'I', text: 'Ïñ¥Î†§Ïö¥ ÏÉÅÌô©ÏóêÏÑúÎèÑ Ïπ®Ï∞©Ìï®ÏùÑ Ïú†ÏßÄÌï† Ïàò ÏûàÎÇòÏöî?' },
            { area: 'I', text: 'ÎÇòÎ≥¥Îã§ Îõ∞Ïñ¥ÎÇú ÏÇ¨ÎûåÏùÑ Ï°¥Í≤ΩÌïòÎäî ÎßàÏùåÏù¥ ÏûàÎÇòÏöî?' },

            // GÏòÅÏó≠ (Growth/ÏÑ±Ïû•) - 16Î¨∏Ìï≠
            { area: 'G', text: 'ÏÉàÎ°úÏö¥ ÌôòÍ≤ΩÏóê Îπ†Î•¥Í≤å Ï†ÅÏùëÌïòÎäî Ìé∏Ïù∏Í∞ÄÏöî?' },
            { area: 'G', text: 'ÎÇ¥Í∞Ä ÎØøÎäî Í∞ÄÏπòÍ¥ÄÏùÑ ÏßÄÌÇ§Î†§Í≥† ÎÖ∏Î†•ÌïòÎÇòÏöî?' },
            { area: 'G', text: 'Î™®Îì† Í≤ÉÏù¥ ÏÑúÎ°ú Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÎã§Í≥† ÏÉùÍ∞ÅÌïòÎÇòÏöî?' },
            { area: 'G', text: 'Í≥ºÍ±∞ Í≤ΩÌóòÏùÑ ÌÜµÌï¥ ÌòÑÏû¨Î•º Ïù¥Ìï¥ÌïòÎ†§Í≥† ÌïòÎÇòÏöî?' },
            { area: 'G', text: 'Í∂ÅÍ∏àÌïú Í≤ÉÏù¥ ÏûàÏúºÎ©¥ Ï∞æÏïÑÎ≥¥Îäî Í≤ÉÏùÑ Ï¢ãÏïÑÌïòÎÇòÏöî?' },
            { area: 'G', text: 'Í∞Å ÏÇ¨ÎûåÏùò ÌäπÎ≥ÑÌïú Ï†êÏùÑ Ïûò ÏïåÏïÑÎ≥¥ÎÇòÏöî?' },
            { area: 'G', text: 'Í≤∞Ï†ïÌïòÍ∏∞ Ï†ÑÏóê Ï∂©Î∂ÑÌûà Í≥†ÎØºÌïòÎäî Ìé∏Ïù∏Í∞ÄÏöî?' },
            { area: 'G', text: 'ÌòÑÏû¨ ÏÉÅÌô©Ïóê Í∞êÏÇ¨ÌïòÎ©∞ ÏÇ¥ÏïÑÍ∞ÄÎäî Ìé∏Ïù∏Í∞ÄÏöî?' },
            { area: 'G', text: 'ÌûòÎì† ÏùºÏù¥ ÏûàÏñ¥ÎèÑ Í∏∞Î∂ÑÏùÑ Î∞ùÍ≤å Ïú†ÏßÄÌïòÎ†§Í≥† ÌïòÎÇòÏöî?' },
            { area: 'G', text: 'Ïπ≠Ï∞¨ÏùÑ Î∞õÏïÑÎèÑ Ïö∞Ï≠êÌïòÏßÄ ÏïäÎäî Ìé∏Ïù∏Í∞ÄÏöî?' },
            { area: 'G', text: 'Îã§Î•∏ ÏÇ¨ÎûåÏùò ÏùòÍ≤¨ÏùÑ Ïûò Î∞õÏïÑÎì§Ïù¥Îäî Ìé∏Ïù∏Í∞ÄÏöî?' },
            { area: 'G', text: 'Í∑úÏπôÏù¥ÎÇò Ïñ¥Î•∏ ÎßêÏîÄÏùÑ Ïûò Îî∞Î•¥Îäî Ìé∏Ïù∏Í∞ÄÏöî?' },
            { area: 'G', text: 'ÏúÑÌóòÌïú ÏÉÅÌô©ÏùÑ ÎØ∏Î¶¨ Ï°∞Ïã¨ÌïòÎäî Ìé∏Ïù∏Í∞ÄÏöî?' },
            { area: 'G', text: 'ÎÇòÏôÄ Îã§Î•∏ ÏÇ¨ÎûåÎèÑ ÏÜåÏ§ëÌïòÍ≤å ÏÉùÍ∞ÅÌïòÎÇòÏöî?' },
            { area: 'G', text: 'Ïã§ÏàòÌïú ÏπúÍµ¨Î•º Ïù¥Ìï¥ÌïòÍ≥† Î∞õÏïÑÎì§Ïù¥ÎÇòÏöî?' },
            { area: 'G', text: 'ÎÇ¥Í∞Ä Ìï¥Ïïº Ìï† ÏùºÏùÄ Ïä§Ïä§Î°ú Ï±ôÍ∏∞Îäî Ìé∏Ïù∏Í∞ÄÏöî?' }
        ];

        // Ïú†ÌòïÎ≥Ñ Îç∞Ïù¥ÌÑ∞
        const typeData = {
            'AC': {
                name: 'ACÌòï - Ïã§Ï≤úÏ†Å ÏÜåÌÜµÍ∞Ä',
                description: 'Î™©Ìëú Îã¨ÏÑ±Í≥º Í¥ÄÍ≥Ñ ÌòïÏÑ±ÏùÑ ÎèôÏãúÏóê Ï∂îÍµ¨ÌïòÎäî Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['Ïπ¥Ìéò Îß§ÎãàÏ†Ä', 'Í≥†Í∞ù ÏÑ±Í≥µ Îß§ÎãàÏ†Ä', 'ÍµêÏú° ÌîÑÎ°úÍ∑∏Îû® ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞'],
                startups: ['Ïª§ÎÆ§ÎãàÌã∞ Ïπ¥Ìéò Ï∞ΩÏóÖ', 'Ïò®ÎùºÏù∏ ÌïôÏäµ ÌîåÎû´Ìèº'],
                strengths: ['SMART Î™©Ìëú ÏÑ§Ï†ïÍ≥º Í¥ÄÍ≥Ñ ÌÜµÌï©', 'ÌîºÎìúÎ∞± Î£®ÌîÑ ÏãúÏä§ÌÖú Íµ¨Ï∂ï', 'ÌòëÏóÖ ÎèÑÍµ¨ ÌôúÏö© Ïó≠Îüâ', 'Ïä§ÌÜ†Î¶¨ÌÖîÎßÅ Í∏∞Î∞ò ÏÑ§Îìù Í∏∞Î≤ï']
            },
            'AT': {
                name: 'ATÌòï - Ïã§Ï≤úÏ†Å ÏÇ¨Í≥†Í∞Ä',
                description: 'Ï≤¥Í≥ÑÏ†Å Ïã§ÌñâÎ†•Í≥º Î∂ÑÏÑùÏ†Å ÏÇ¨Í≥†Î•º Í≤∞Ìï©Ìïú Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑùÍ∞Ä', 'ÌíàÏßà Í¥ÄÎ¶¨Ïûê', 'ÏãúÏä§ÌÖú Í∞úÎ∞úÏûê'],
                startups: ['Ïï± Í∞úÎ∞ú ÏÇ¨ÏóÖ', 'Ïò®ÎùºÏù∏ ÏáºÌïëÎ™∞'],
                strengths: ['Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò ÏùòÏÇ¨Í≤∞Ï†ï', 'ÌîÑÎ°úÏÑ∏Ïä§ ÏµúÏ†ÅÌôî', 'ÎÖºÎ¶¨Ï†Å Î¨∏Ï†úÌï¥Í≤∞', 'Ï≤¥Í≥ÑÏ†Å Í≥ÑÌöç ÏàòÎ¶Ω']
            },
            'AI': {
                name: 'AIÌòï - Ïã§Ï≤úÏ†Å Î¶¨Îçî',
                description: 'Í∞ïÎ†•Ìïú Ïã§ÌñâÎ†•Í≥º ÏòÅÌñ•Î†•ÏúºÎ°ú Î≥ÄÌôîÎ•º Ïù¥ÎÅÑÎäî Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['ÌåÄÏû•/Í¥ÄÎ¶¨Ïûê', 'ÏòÅÏóÖ Îã¥ÎãπÏûê', 'ÌîÑÎ°úÏ†ùÌä∏ Îß§ÎãàÏ†Ä'],
                startups: ['Ïª®ÏÑ§ÌåÖ ÌöåÏÇ¨', 'ÎßàÏºÄÌåÖ ÎåÄÌñâÏÇ¨'],
                strengths: ['Î≥ÄÌôî Í¥ÄÎ¶¨ Î¶¨ÎçîÏã≠', 'Î™©Ìëú Ï§ëÏã¨ Ïã§ÌñâÎ†•', 'ÌåÄ ÎèôÍ∏∞Î∂ÄÏó¨', 'Í≤∞Í≥º Ï§ëÏã¨ ÏÇ¨Í≥†']
            },
            'AG': {
                name: 'AGÌòï - Ïã§Ï≤úÏ†Å ÏÑ±Ïû•Í∞Ä',
                description: 'ÏßÄÏÜçÏ†ÅÏù∏ Ïã§ÌñâÏùÑ ÌÜµÌï¥ Í∞úÏù∏Í≥º Ï°∞ÏßÅÏùò ÏÑ±Ïû•ÏùÑ ÎèïÎäî Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['ÎùºÏù¥ÌîÑ ÏΩîÏπò', 'Ìä∏Î†àÏù¥ÎÑà', 'ÏÉÅÎã¥ÏÇ¨'],
                startups: ['ÌîºÌä∏ÎãàÏä§ ÏÑºÌÑ∞', 'Ïò®ÎùºÏù∏ ÏΩîÏπ≠'],
                strengths: ['ÏÑ±Ïû• Ï§ëÏã¨ Î™©Ìëú ÏÑ§Ï†ï', 'ÏßÄÏÜçÏ†Å ÌïôÏäµ ÏäµÍ¥Ä', 'ÏûêÍ∏∞ ÏÑ±Ï∞∞ Îä•Î†•', 'Ï†êÏßÑÏ†Å Í∞úÏÑ† Î∞©Î≤ï']
            },
            'CA': {
                name: 'CAÌòï - ÏÜåÌÜµÌïòÎäî Ïã§Ï≤úÍ∞Ä',
                description: 'Îõ∞Ïñ¥ÎÇú ÏÜåÌÜµ Îä•Î†•ÏúºÎ°ú Ïã§Î¨¥Î•º Ìö®Í≥ºÏ†ÅÏúºÎ°ú Ï∂îÏßÑÌïòÎäî Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['Í≥†Í∞ù ÏÑúÎπÑÏä§ ÌåÄÏû•', 'Ïù∏ÏÇ¨ Îã¥ÎãπÏûê', 'ÏòÅÏóÖ Í¥ÄÎ¶¨Ïûê'],
                startups: ['ÏÑúÎπÑÏä§ÏóÖ Ï∞ΩÏóÖ', 'Ïù∏Ïû¨ Ï§ëÍ∞ú ÏÇ¨ÏóÖ'],
                strengths: ['Í≥†Í∞ù Ï§ëÏã¨ ÏÑúÎπÑÏä§', 'ÌåÄÏõåÌÅ¨ Í∞ïÌôî', 'Í∞àÎì± Ìï¥Í≤∞ Îä•Î†•', 'Í¥ÄÍ≥Ñ Í∏∞Î∞ò ÏóÖÎ¨¥ Ï∂îÏßÑ']
            },
            'CT': {
                name: 'CTÌòï - Ï∞ΩÏ°∞Ï†Å ÏÜåÌÜµÍ∞Ä',
                description: 'Ï∞ΩÏùòÏ†Å ÏïÑÏù¥ÎîîÏñ¥Î•º ÏÇ¨ÎûåÎì§Í≥º ÎÇòÎàÑÎ©∞ Î∞úÏ†ÑÏãúÌÇ§Îäî Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['Í¥ëÍ≥† Í∏∞ÌöçÏûê', 'ÏΩòÌÖêÏ∏† Ï†úÏûëÏûê', 'ÎßàÏºÄÌåÖ Ï†ÑÎ¨∏Í∞Ä'],
                startups: ['Í¥ëÍ≥† Ï†úÏûëÏÇ¨', 'Ïú†ÌäúÎ∏å Ï±ÑÎÑê'],
                strengths: ['Ï∞ΩÏùòÏ†Å ÏΩòÌÖêÏ∏† Í∏∞Ìöç', 'Î∏åÎ†àÏù∏Ïä§ÌÜ†Î∞ç ÏßÑÌñâ', 'ÏïÑÏù¥ÎîîÏñ¥ ÏãúÍ∞ÅÌôî', 'Ïä§ÌÜ†Î¶¨ÌÖîÎßÅ Ïó≠Îüâ']
            },
            'CI': {
                name: 'CIÌòï - ÏòÅÌñ•Î†• ÏûàÎäî ÏÜåÌÜµÍ∞Ä',
                description: 'Îõ∞Ïñ¥ÎÇú ÏÜåÌÜµ Îä•Î†•ÏúºÎ°ú ÏÇ¨ÎûåÎì§ÏóêÍ≤å ÏòÅÌñ•ÏùÑ ÎØ∏ÏπòÎäî Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['Î∞©ÏÜ°Ïù∏', 'ÏÑ∏ÏùºÏ¶à Îß§ÎãàÏ†Ä', 'Ïù¥Î≤§Ìä∏ Í∏∞ÌöçÏûê'],
                startups: ['Î∞©ÏÜ° Ï†úÏûëÏÇ¨', 'Ïù¥Î≤§Ìä∏ ÌöåÏÇ¨'],
                strengths: ['ÎåÄÏ§ë ÏÜåÌÜµ Îä•Î†•', 'ÎÑ§Ìä∏ÏõåÌÇπ Ïó≠Îüâ', 'Î∏åÎûúÎìú Íµ¨Ï∂ï', 'ÏòÅÌñ•Î†• ÌôïÏû• Ï†ÑÎûµ']
            },
            'CG': {
                name: 'CGÌòï - ÏÑ±Ïû• ÎèïÎäî ÏÜåÌÜµÍ∞Ä',
                description: 'Îî∞ÎúªÌïú ÏÜåÌÜµÏúºÎ°ú ÌÉÄÏù∏Ïùò ÏÑ±Ïû•ÏùÑ ÎèïÎäî Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['ÏÉÅÎã¥ÏÇ¨', 'ÍµêÏÇ¨', 'ÏÇ¨ÌöåÎ≥µÏßÄÏÇ¨'],
                startups: ['ÏÉÅÎã¥ÏÑºÌÑ∞', 'ÍµêÏú° ÏÑúÎπÑÏä§'],
                strengths: ['Í≥µÍ∞êÏ†Å ÏÜåÌÜµ', 'Î©òÌÜ†ÎßÅ Í∏∞Ïà†', 'Í∞úÏù∏Î≥Ñ ÎßûÏ∂§ ÏßÄÎèÑ', 'ÏπòÏú†Ï†Å ÎåÄÌôîÎ≤ï']
            },
            'TA': {
                name: 'TAÌòï - ÏÇ¨Í≥†ÌïòÎäî Ïã§Ï≤úÍ∞Ä',
                description: 'ÍπäÏù¥ ÏûàÎäî ÏÇ¨Í≥†Î•º Î∞îÌÉïÏúºÎ°ú Ï≤¥Í≥ÑÏ†ÅÏúºÎ°ú Ïã§ÌñâÌïòÎäî Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['Ïó∞Íµ¨Ïõê', 'Ï†úÌíà Í∞úÎ∞úÏûê', 'Í∏∞Ïà†Ïûê'],
                startups: ['Í∏∞Ïà† Í∞úÎ∞ú ÌöåÏÇ¨', 'ÌäπÌóà ÏÇ¨ÏóÖ'],
                strengths: ['Ï†ÑÎûµÏ†Å ÏÇ¨Í≥†', 'Í∏∞Ïà†Ï†Å Î∂ÑÏÑù', 'ÌòÅÏã†Ï†Å ÏÜîÎ£®ÏÖò', 'Ï≤¥Í≥ÑÏ†Å Ïó∞Íµ¨ Î∞©Î≤ï']
            },
            'TC': {
                name: 'TCÌòï - Ï∞ΩÏùòÏ†Å ÏÇ¨Í≥†Í∞Ä',
                description: 'ÎèÖÏ∞ΩÏ†Å ÏÇ¨Í≥†Î•º Îã§ÏñëÌïú Î∞©ÏãùÏúºÎ°ú ÌëúÌòÑÌïòÎäî Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['ÏûëÍ∞Ä', 'ÎîîÏûêÏù¥ÎÑà', 'ÏΩòÌÖêÏ∏† ÌÅ¨Î¶¨ÏóêÏù¥ÌÑ∞'],
                startups: ['Ï∂úÌåêÏÇ¨', 'ÎîîÏûêÏù∏ Ïä§ÌäúÎîîÏò§'],
                strengths: ['Ï∞ΩÏùòÏ†Å Î∞úÏÉÅÎ≤ï', 'ÏïÑÏù¥ÎîîÏñ¥ Íµ¨Ï≤¥Ìôî', 'ÏòàÏà†Ï†Å ÌëúÌòÑ', 'ÎèÖÏ∞ΩÏÑ± Í∞úÎ∞ú']
            },
            'TI': {
                name: 'TIÌòï - Ï†ÑÎûµÏ†Å Î¶¨Îçî',
                description: 'Ï†ÑÎûµÏ†Å ÏÇ¨Í≥†ÏôÄ Î¶¨ÎçîÏã≠ÏùÑ Í≤∞Ìï©Ìïú Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['Í≤ΩÏòÅÏª®ÏÑ§ÌÑ¥Ìä∏', 'Ìà¨Ïûê Î∂ÑÏÑùÍ∞Ä', 'Ï†ÑÎûµ Í∏∞ÌöçÏûê'],
                startups: ['Ïª®ÏÑ§ÌåÖ Ìéå', 'Ìà¨Ïûê ÌöåÏÇ¨'],
                strengths: ['Ï†ÑÎûµÏ†Å Í∏∞Ìöç', 'ÏãúÏû• Î∂ÑÏÑù', 'Î¶¨ÎçîÏã≠ Í∞úÎ∞ú', 'ÌòÅÏã† Í≤ΩÏòÅ']
            },
            'TG': {
                name: 'TGÌòï - ÏßÄÌòúÎ°úÏö¥ ÏÑ±Ïû•Í∞Ä',
                description: 'ÍπäÏù¥ ÏûàÎäî ÏÇ¨Í≥†Î°ú ÏßÄÏÜçÏ†ÅÏù∏ ÏÑ±Ïû•ÏùÑ Ï∂îÍµ¨ÌïòÎäî Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['ÍµêÏàò', 'Ïó∞Íµ¨ Í∏∞ÌöçÏûê', 'ÍµêÏú° Í∞úÎ∞úÏûê'],
                startups: ['Ïò®ÎùºÏù∏ ÍµêÏú°', 'Ïó∞Íµ¨ÏÜå'],
                strengths: ['ÌïôÏäµ ÏÑ§Í≥Ñ', 'ÏßÄÏãù Ï≤¥Í≥ÑÌôî', 'ÏÑ±Ï∞∞Ï†Å ÏÇ¨Í≥†', 'ÏßÄÌòú Ï†ÑÏàò Îä•Î†•']
            },
            'IA': {
                name: 'IAÌòï - ÏòÅÌñ•Î†• ÏûàÎäî Ïã§Ï≤úÍ∞Ä',
                description: 'Í∞ïÎ†•Ìïú ÏòÅÌñ•Î†•ÏúºÎ°ú Ïã§ÏßàÏ†Å Î≥ÄÌôîÎ•º ÎßåÎì§Ïñ¥ÎÇ¥Îäî Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['ÏÇ¨ÏóÖÍ∞Ä', 'Î∂ÄÏÑúÏû•', 'Ïä§ÌÉÄÌä∏ÏóÖ ÎåÄÌëú'],
                startups: ['ÌîÑÎûúÏ∞®Ïù¥Ï¶à ÏÇ¨ÏóÖ', 'ÌÖåÌÅ¨ Ïä§ÌÉÄÌä∏ÏóÖ'],
                strengths: ['ÏÇ¨ÏóÖ Í∏∞Ìöå Ìè¨Ï∞©', 'Ï°∞ÏßÅ ÌòÅÏã†', 'ÏÑ±Í≥º Ï∞ΩÏ∂ú', 'ÏãúÏû• Í∞úÏ≤ô']
            },
            'IC': {
                name: 'ICÌòï - ÏÇ¨ÌöåÏ†Å ÏòÅÌñ•Í∞Ä',
                description: 'ÏÜåÌÜµÏùÑ ÌÜµÌï¥ ÏÇ¨ÌöåÏóê Í∏çÏ†ïÏ†Å ÏòÅÌñ•ÏùÑ ÎØ∏ÏπòÎäî Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['Ï†ïÏπòÏù∏', 'Ïñ∏Î°†Ïù∏', 'Ïª§ÎÆ§ÎãàÌã∞ Î¶¨Îçî'],
                startups: ['ÎØ∏ÎîîÏñ¥ ÌöåÏÇ¨', 'ÏÜåÏÖú Î≤§Ï≤ò'],
                strengths: ['ÏÇ¨ÌöåÏ†Å ÏòÅÌñ•Î†•', 'Ïó¨Î°† ÌòïÏÑ±', 'Í≥µÏùµ Ï∂îÍµ¨', 'Ïª§ÎÆ§ÎãàÌã∞ Íµ¨Ï∂ï']
            },
            'IT': {
                name: 'ITÌòï - ÌòÅÏã†Ï†Å Î¶¨Îçî',
                description: 'ÌòÅÏã†Ï†Å ÏÇ¨Í≥†ÏôÄ Í∞ïÎ†•Ìïú Î¶¨ÎçîÏã≠ÏùÑ Í≤∏ÎπÑÌïú Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['Í∏∞ÏóÖ ÏûÑÏõê', 'ÌòÅÏã† Îã¥ÎãπÏûê', 'Î≤§Ï≤ò Ìà¨ÏûêÏûê'],
                startups: ['ÌòÅÏã† Í∏∞ÏóÖ', 'Ìà¨Ïûê ÌéÄÎìú'],
                strengths: ['ÌòÅÏã† Ï†ÑÎûµ', 'ÎØ∏Îûò ÏòàÏ∏°', 'Ìà¨Ïûê ÌåêÎã®', 'Î≥ÄÌôî Î¶¨ÎçîÏã≠']
            },
            'IG': {
                name: 'IGÌòï - ÏÑ±Ïû• Ïù¥ÎÅÑÎäî Î¶¨Îçî',
                description: 'Î¶¨ÎçîÏã≠ÏúºÎ°ú ÌÉÄÏù∏Í≥º Ï°∞ÏßÅÏùò ÏÑ±Ïû•ÏùÑ Ïù¥ÎÅÑÎäî Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['Î©òÌÜ†', 'Í∞ïÏÇ¨', 'ÏΩîÏπò'],
                startups: ['ÍµêÏú° Í∏∞Í¥Ä', 'Í∞úÏù∏ Î∏åÎûúÎî©'],
                strengths: ['Î©òÌÜ†ÎßÅ Î¶¨ÎçîÏã≠', 'ÏÑ±Ïû• ÎèôÍ∏∞Î∂ÄÏó¨', 'Í∞úÎ∞ú Í≥ÑÌöç ÏàòÎ¶Ω', 'ÏßÄÏÜçÏ†Å Í≤©Î†§']
            },
            'GA': {
                name: 'GAÌòï - ÏÑ±Ïû•ÌïòÎäî Ïã§Ï≤úÍ∞Ä',
                description: 'ÏßÄÏÜçÏ†ÅÏù∏ ÏÑ±Ïû•ÏùÑ ÌÜµÌï¥ Ïã§ÏßàÏ†Å Í∞ÄÏπòÎ•º Ï∞ΩÏ∂úÌïòÎäî Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['Í±¥Í∞ï Í¥ÄÎ¶¨ÏÇ¨', 'ÎùºÏù¥ÌîÑ ÌîåÎûòÎÑà', 'Í∞úÏù∏ Ìä∏Î†àÏù¥ÎÑà'],
                startups: ['Ïõ∞ÎãàÏä§ ÏÑºÌÑ∞', 'ÎùºÏù¥ÌîÑ Ïª®ÏÑ§ÌåÖ'],
                strengths: ['ÏûêÍ∏∞Í≥ÑÎ∞ú Ïã§Ï≤ú', 'Í±¥Í∞ïÌïú ÏäµÍ¥Ä ÌòïÏÑ±', 'Í∑†ÌòïÏû°Ìûå ÏÉùÌôú', 'Ï†êÏßÑÏ†Å Î™©Ìëú Îã¨ÏÑ±']
            },
            'GC': {
                name: 'GCÌòï - ÏÑ±Ïû• ÎèïÎäî ÏÜåÌÜµÍ∞Ä',
                description: 'ÏÜåÌÜµÏùÑ ÌÜµÌï¥ Í≥µÎèôÏ≤¥Ïùò ÏÑ±Ïû•ÏùÑ ÎèïÎäî Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['ÏïÑÎèô ÏÉÅÎã¥ÏÇ¨', 'Ïª§ÎÆ§ÎãàÌã∞ Îß§ÎãàÏ†Ä', 'ÏûêÏõêÎ¥âÏÇ¨ ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞'],
                startups: ['ÏÇ¨ÌöåÏ†Å Í∏∞ÏóÖ', 'Ïª§ÎÆ§ÎãàÌã∞ ÎπÑÏ¶àÎãàÏä§'],
                strengths: ['Í≥µÎèôÏ≤¥ ÏùòÏãù', 'ÏÉÅÌò∏ ÏÑ±Ïû• ÏßÄÏõê', 'ÏÇ¨ÌöåÏ†Å Í∞ÄÏπò Ï∂îÍµ¨', 'ÏßÄÏÜçÍ∞ÄÎä•Ìïú Í¥ÄÍ≥Ñ']
            },
            'GT': {
                name: 'GTÌòï - ÌïôÏäµÌïòÎäî ÏÑ±Ïû•Í∞Ä',
                description: 'ÏßÄÏÜçÏ†Å ÌïôÏäµÏùÑ ÌÜµÌï¥ Í∞úÏù∏Í≥º Ï°∞ÏßÅÏùò Î∞úÏ†ÑÏùÑ Ï∂îÍµ¨ÌïòÎäî Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['ÍµêÏú° Ïó∞Íµ¨Ïõê', 'ÌïôÏäµ ÏÑ§Í≥ÑÏûê', 'ÏßÑÎ°ú ÏÉÅÎã¥ÏÇ¨'],
                startups: ['ÏóêÎìÄÌÖåÌÅ¨ ÌöåÏÇ¨', 'ÏßÑÎ°ú Ïª®ÏÑ§ÌåÖ'],
                strengths: ['ÌïôÏäµ Î∞©Î≤ïÎ°†', 'ÍµêÏú° ÏÑ§Í≥Ñ', 'ÏÑ±Ïû• ÏßÑÎã®', 'ÏßÑÎ°ú Í∞úÎ∞ú']
            },
            'GI': {
                name: 'GIÌòï - ÏòÅÍ∞êÏùÑ Ï£ºÎäî ÏÑ±Ïû•Í∞Ä',
                description: 'Í∞úÏù∏Ïùò ÏÑ±Ïû•ÏùÑ ÌÜµÌï¥ ÌÉÄÏù∏ÏóêÍ≤å ÏòÅÍ∞êÏùÑ Ï£ºÎäî Ïú†ÌòïÏûÖÎãàÎã§.',
                jobs: ['ÎèôÍ∏∞Î∂ÄÏó¨ Í∞ïÏÇ¨', 'ÏûêÍ∏∞Í≥ÑÎ∞ú ÏΩîÏπò', 'ÏõåÌÅ¨Ïàç ÏßÑÌñâÏûê'],
                startups: ['ÏûêÍ∏∞Í≥ÑÎ∞ú ÍµêÏú°', 'ÎèôÍ∏∞Î∂ÄÏó¨ Ïª®ÏÑ§ÌåÖ'],
                strengths: ['ÏòÅÍ∞êÏ†Å Î¶¨ÎçîÏã≠', 'ÎèôÍ∏∞Î∂ÄÏó¨ Í∏∞Î≤ï', 'Í∞úÏù∏ Î≥ÄÌôî Ï¥âÏßÑ', 'ÏÑ±Í≥µ Ïä§ÌÜ†Î¶¨ Ï∞ΩÏ°∞']
            }
        };

        // ÏßÑÎã® ÏÉÅÌÉú
        let currentQuestion = 0;
        let answers = [];
        let scores = { A: 0, C: 0, T: 0, I: 0, G: 0 };

        function startDiagnosis() {
            document.getElementById('home-screen').classList.add('hidden');
            document.getElementById('question-screen').classList.remove('hidden');
            currentQuestion = 0;
            answers = [];
            scores = { A: 0, C: 0, T: 0, I: 0, G: 0 };
            showQuestion();
        }

        function showQuestion() {
            const question = questions[currentQuestion];
            const questionCard = document.getElementById('question-screen');
            const progressPercent = Math.round((currentQuestion / questions.length) * 100);
            
            // ÏòÅÏó≠Î≥Ñ ÏÉâÏÉÅ Ï†ÅÏö©
            questionCard.className = `card question-card area-${question.area}`;
            
            // ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏
            document.getElementById('progress-percent').textContent = progressPercent + '%';
            document.getElementById('question-number').textContent = `ÏßàÎ¨∏ ${currentQuestion + 1} / ${questions.length}`;
            
            // ÏßÑÌñâÎ•† ÎßÅ ÏóÖÎç∞Ïù¥Ìä∏
            const progressCircle = document.querySelector('.progress-ring .progress');
            const circumference = 2 * Math.PI * 52;
            const offset = circumference - (progressPercent / 100) * circumference;
            progressCircle.style.strokeDashoffset = offset;
            
            // ÏßàÎ¨∏ ÌÖçÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
            document.getElementById('question-text').textContent = question.text;
            
            // ÏÑ†ÌÉùÏßÄ Ï¥àÍ∏∞Ìôî
            const options = document.querySelectorAll('.option');
            options.forEach(option => {
                option.classList.remove('selected');
                option.onclick = () => selectOption(parseInt(option.dataset.value));
            });
        }

        function selectOption(value) {
            // ÌñÖÌã± ÌîºÎìúÎ∞± (Î™®Î∞îÏùº)
            if (navigator.vibrate) {
                navigator.vibrate(50);
            }
            
            // ÏÑ†ÌÉùÎêú ÏòµÏÖò ÌëúÏãú
            const options = document.querySelectorAll('.option');
            options.forEach(option => option.classList.remove('selected'));
            document.querySelector(`[data-value="${value}"]`).classList.add('selected');
            
            // ÎãµÎ≥Ä Ï†ÄÏû•
            answers[currentQuestion] = value;
            const area = questions[currentQuestion].area;
            scores[area] += value;
            
            // ÏûêÎèô ÏßÑÌñâ (0.8Ï¥à ÌõÑ)
            setTimeout(() => {
                currentQuestion++;
                if (currentQuestion < questions.length) {
                    showQuestion();
                } else {
                    showResults();
                }
            }, 800);
        }

        function showResults() {
            // Ïª®ÌéòÌã∞ Ìö®Í≥º
            createConfetti();
            
            document.getElementById('question-screen').classList.add('hidden');
            document.getElementById('results-screen').classList.remove('hidden');
            
            // Ï†êÏàò Ï†ïÍ∑úÌôî (ÏµúÎåÄ 16Ï†ê Í∏∞Ï§Ä)
            const maxScore = 16 * 5; // 16Î¨∏Ìï≠ * 5Ï†ê
            const normalizedScores = {
                A: Math.round((scores.A / maxScore) * 100),
                C: Math.round((scores.C / maxScore) * 100),
                T: Math.round((scores.T / maxScore) * 100),
                I: Math.round((scores.I / maxScore) * 100),
                G: Math.round((scores.G / maxScore) * 100)
            };
            
            // ÏÉÅÏúÑ 2Í∞ú ÏòÅÏó≠ Ï∞æÍ∏∞
            const sortedScores = Object.entries(scores).sort((a, b) => b[1] - a[1]);
            const topAreas = [sortedScores[0][0], sortedScores[1][0]];
            const userType = topAreas.join('');
            
            // Ïú†Ìòï Ï†ïÎ≥¥ ÌëúÏãú
            const typeInfo = typeData[userType];
            document.getElementById('user-type').textContent = typeInfo.name;
            document.getElementById('type-description').textContent = typeInfo.description;
            
            // Ï∂îÏ≤ú ÏßÅÏóÖ ÌëúÏãú
            const jobList = document.getElementById('job-recommendations');
            jobList.innerHTML = typeInfo.jobs.map(job => `<li>${job}</li>`).join('');
            
            // Ï∂îÏ≤ú Ï∞ΩÏóÖ Î∂ÑÏïº ÌëúÏãú
            const startupList = document.getElementById('startup-recommendations');
            startupList.innerHTML = typeInfo.startups.map(startup => `<li>${startup}</li>`).join('');
            
            // Í∞ïÏ†ê Í∞ïÌôî Î∞©Î≤ï ÌëúÏãú
            const strengthsGrid = document.getElementById('strengths-grid');
            strengthsGrid.innerHTML = typeInfo.strengths.map(strength => 
                `<div class="strength-card">${strength}</div>`
            ).join('');
            
            // Î†àÏù¥Îçî Ï∞®Ìä∏ ÏÉùÏÑ±
            createRadarChart(normalizedScores);
        }

        function createRadarChart(scores) {
            const ctx = document.getElementById('radarChart').getContext('2d');
            
            new Chart(ctx, {
                type: 'radar',
                data: {
                    labels: ['Ïã§Ï≤ú (A)', 'ÏÜåÌÜµ (C)', 'ÏÇ¨Í≥† (T)', 'ÏòÅÌñ• (I)', 'ÏÑ±Ïû• (G)'],
                    datasets: [{
                        label: 'ÎÇòÏùò Ï†êÏàò',
                        data: [scores.A, scores.C, scores.T, scores.I, scores.G],
                        backgroundColor: 'rgba(102, 126, 234, 0.2)',
                        borderColor: 'rgba(102, 126, 234, 1)',
                        borderWidth: 3,
                        pointBackgroundColor: 'rgba(102, 126, 234, 1)',
                        pointBorderColor: '#fff',
                        pointBorderWidth: 2,
                        pointRadius: 6
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        r: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                stepSize: 20,
                                font: {
                                    size: 12
                                }
                            },
                            pointLabels: {
                                font: {
                                    size: 14,
                                    weight: 'bold'
                                }
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            },
                            angleLines: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            }
                        }
                    },
                    animation: {
                        duration: 2000,
                        easing: 'easeInOutQuart'
                    }
                }
            });
        }

        function createConfetti() {
            const confetti = document.createElement('div');
            confetti.className = 'confetti';
            document.body.appendChild(confetti);
            
            for (let i = 0; i < 50; i++) {
                const piece = document.createElement('div');
                piece.style.position = 'absolute';
                piece.style.width = '10px';
                piece.style.height = '10px';
                piece.style.backgroundColor = ['#667eea', '#764ba2', '#FF9800', '#2196F3', '#4CAF50'][Math.floor(Math.random() * 5)];
                piece.style.left = Math.random() * 100 + '%';
                piece.style.animationDelay = Math.random() * 3 + 's';
                piece.style.animation = 'fall 3s linear infinite';
                confetti.appendChild(piece);
            }
            
            // 3Ï¥à ÌõÑ Ï†úÍ±∞
            setTimeout(() => {
                document.body.removeChild(confetti);
            }, 3000);
        }

        function saveResults() {
            const resultData = {
                date: new Date().toISOString(),
                scores: scores,
                answers: answers,
                timestamp: Date.now()
            };
            
            localStorage.setItem('actig_results', JSON.stringify(resultData));
            alert('Í≤∞Í≥ºÍ∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!');
        }

        function shareResults() {
            const resultText = `ACTIG ÌçºÏä§ÎÑê Î∏åÎûúÎî© ÏßÑÎã® Í≤∞Í≥ºÎ•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî!\n${document.getElementById('user-type').textContent}\n\nÏßÑÎã® Î∞õÍ∏∞: ${window.location.href}`;
            
            if (navigator.share) {
                navigator.share({
                    title: 'ACTIG ÌçºÏä§ÎÑê Î∏åÎûúÎî© ÏßÑÎã® Í≤∞Í≥º',
                    text: resultText,
                    url: window.location.href
                });
            } else {
                navigator.clipboard.writeText(resultText).then(() => {
                    alert('Í≤∞Í≥ºÍ∞Ä ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§!');
                });
            }
        }

        function downloadPDF() {
            // Í∞ÑÎã®Ìïú PDF Îã§Ïö¥Î°úÎìú ÏãúÎÆ¨Î†àÏù¥ÏÖò
            alert('PDF Îã§Ïö¥Î°úÎìú Í∏∞Îä•ÏùÄ Ïã§Ï†ú ÏÑúÎπÑÏä§ÏóêÏÑú Íµ¨ÌòÑÎê©ÎãàÎã§.');
        }

        function restartDiagnosis() {
            document.getElementById('results-screen').classList.add('hidden');
            document.getElementById('home-screen').classList.remove('hidden');
        }

        // CSS Ïï†ÎãàÎ©îÏù¥ÏÖò Ï∂îÍ∞Ä
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fall {
                to {
                    transform: translateY(100vh);
                }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>
